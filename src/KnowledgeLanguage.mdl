# Knowledge language
Knowledge language is a programming language for [[Knowledge]].

It abstracts away all the low-level operations like parsing the knowledge program and compiling it down to computable set of instructions, so the user (a knowledge engineer) can focus on the high-level tasks instead of manually traversing the graph of relations and abstractions for every simple statement or algorithm.

> Here's one quote

**For example, to evaluate the statement** “The Sky is Blue”, we’d write  `Sky.is(Blue)` and the program would return a boolean. But what happens under the hood is (1)  a parser turns into Abstract Syntax Tree (AST) , and (2) [[Knowledge compiler]] optimizes it and turns the AST into executable set of instructions for the CPU.

*Knowledge language algorithms* might run on instances of a particular set of [[Abstraction]]s that are stored in the [[Knowledge databases]]. That way it’s degrees of freedom aren’t constrained to static knowledge definitions, but are expanded to infinite with (now unimaginable) data streams.